package star;

public class Example {
// public class 클래스 이름 { }

//    클래스 변수;
//    변수 = new 클래스();

// 클래스 변수(이름 내맘대로 지정) = new 클래스();

// 필드
//  int 필드네임; --> 객체와 데이터가 저장되는 곳
// 필드 객체의 고유데이터 선언형태는 변수 필드를 변수라 부르지 않음 / 변수는 생성자와 메소드 내에서만 사용되고 생서자와 메소드가 실행 종료
// 되면 자동 소멸됨 하지만 필드는 생성자와 메소드 전체에서 사용되며 객체가 소멸되지 않는한 객체와 함께 존재함


// 생성자
// className() { }  --> 객체 생성시 초기화 역활 담당
// 생성자는 new 연산자로 호출되는 특별한 중괄호 블럭 생성자의 역활은 객체 생성시 초기화를 하거나 메소드를 호출해 객체를 사용할 준비를 함
// 생성자는 메소드와 비슷하게 생겼지만 클래스 이름으로 되어있고 리턴 타입이 없음


// void methodName()  { }  --> 객체의 동작에 해당하는 실행 블럭
// 객체의 동작에 해당하는 중괄호 블럭 메소드를 호출하게 되면 중괄호 블럭에 있는 모든 코드들이 일괄적으로 실행됨
// 메소드는 객체간의 데이터 전달 수단으로 사용되며 외부로부터 매개값을 받을수 도 있고 실행후 어떤 값을 리던할 수도 있음


    // 타입 필드 [ = 초기값 ];
    String company = "자동차";
    String model = "그렌져";
    int maxSpeed = 300;
    private String fastheal;
    private String blind;
    boolean engineStart;

// 클래스 (매개변수 선언, ---- ) {
//    객체 초기화 코드
// }

// 접근제한자 리턴타입 메소드이름 (매개변수 선언 ) { 샐행할 코드 작성 하는곳  }

    public int Firebat(int attack, int defensive) {
        //this.필드(매개변수,매개변수)
        this.Firebat(10, 5);

        return 15;
    }

    public String heal(String fastheal, String blind) {
        //this.필드 = 매개변수;
        this.fastheal = fastheal;
        this.blind = blind;

        return fastheal;

    }


// 외부 클래스에서 메소드를 호출하려면 클래스로부터 객체를 생성해야함 메소드는 객체에 소속된 멤버이므로 객체가 존재하지 않으면 메소드도 존재하지않음
// 클래스 참조변수 = new 클래스(매개값, ''''' );

// 객체가 생성 되었으면 참조 변수와 함께 도트 (.) 연산자를 사용해서 메소드를 호출 가능함
// 참조변수.메소드( 매개값, '''' );                --> 리턴값이 없거나, 있어도 리턴값을 받지 않을 경우
// 타입 변수 = 참조변수.메소드(매개값,''''''');     --> 리턴값이 있고, 리턴값을 받고 싶을 경우

//메소드 오버로딩 매개값을 다양하게 처리하기 위해서이다 같음 메소드에 매개값을 다르게 해서 받을수 있다.
//객체 내부에서 인스턴스 맴버(필드)에 접근하기 위해서 this 를 사용한다 ex)this.blind = blind;

//정적 멤버는 클래스에 고정된 멤버로서 객체를 생성하지 않고 바로 사용할수 있는 필드와 메소드를 말한다 이들을 각각 정적 필드 , 정적 메소드 라고  부르며
//정적 멤버는 객체(인스턴스)에 소속된 멤버가 아니라 클래스에 소속된 멤버이므로 클래스 멤버라고 한다

//정적 필드
//static 타입 필드 [= 초기값];
//필드를 선언할때 인스턴스 필드로 선언할 것인지 정적필드로 선언할 것인지에 대한 판단기준은 객체마다 가지고 있어야 할 데이터라면
//인스턴스 필드로 선언하고 객체마다 가지고 있을 필요성이 없는 공용적인 데이터라면 정적필드로 선언하는것이 좋다


   long result = 10 * Hydra.h;


//정적 메소드
//static 리턴 타입 메소드(매개변수, '''') { .... }
//메소드의 경우 인스턴스 메소드로 선언할 것인가 아니면 정적 메소드로 선언할 것인가의 판단 기준은 인스턴스 필드를 이용해서 실행해야 한다면
//인스턴스 메소드로 선언 하고 인스턴스 필드를 이용하지 않는다면 정적메소드로 선언한다
//정적 메서드에서 인스턴스 멤버를 사용할려면 객체를 먼저 생성하고 참조 변수로 접근해야 한다

//final 필드
//final 필드는 초기값이 저장되면 이것이 최종적인 값이 되어서 프로그램 실행 도중에는 수정이 불가능
// final 타입 필드 [= 초기값 ];
//초기값을 주는 방법은 딱 두가지 인데 하나는 필드 선언시에 주는 방법이고 두번째는 생성자에서 주는 방법이다

//상수는 불변의 값을 저장하는 필드를 말한다
// static final 타입 상수 [= 초기값];
// 상수는 모두 대문자로 작정하는 것이 관례이며 서로다른 단어가 혼한된 이름이라면 언더바를 이용하여 연결해준다



}